generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           Int       @id @unique @default(autoincrement())
  name         String
  email        String    @unique
  password     String
  profileImage String
  cartItem     Product[]
  userId       Int
  role         Role      @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @db.Timestamp
  Account      Account[]
  Session      Session[]

  @@map("users")
}

model Product {
  id          Int        @id @unique @default(autoincrement())
  name        String
  description String
  category    String
  imageUrl    String
  orderedBy   User?      @relation(fields: [orderedById], references: [id])
  orderedById Int?
  price       Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  CartItem    CartItem[]

  @@map("products")
}

model Cart {
  id Int @id @unique @default(autoincrement())

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  // owner    User      @relation(fields: [ownerId], references: [id])
  // ownerId  Int
  CartItem  CartItem[]

  @@map("cart")
}

model CartItem {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  SOLD
  ORDERED
}
